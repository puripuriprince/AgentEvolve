<NAME>
iterative_radii_relaxation
</NAME>

<DESCRIPTION>
Replace the single-pass radii scaling with a multi-pass relaxation (iterative) procedure. This allows interdependent radius adjustments to propagate through the entire circle set, often yielding a larger feasible sum of radii for the same centers. The change keeps the border constraints and pairwise non-overlap logic, but performs several relaxation passes until convergence (or a maximum number of iterations). This tends to improve packing efficiency and can boost the combined score without altering the external interface.
</DESCRIPTION>

<DIFF>
<<<<<<< SEARCH
def compute_max_radii(centers):
    """
    Compute the maximum possible radii for each circle position
    such that they don't overlap and stay within the unit square.

    Args:
        centers: np.array of shape (n, 2) with (x, y) coordinates

    Returns:
        np.array of shape (n) with radius of each circle
    """
    n = centers.shape[0]
    radii = np.ones(n)

    # First, limit by distance to square borders
    for i in range(n):
        x, y = centers[i]
        # Distance to borders
        radii[i] = min(x, y, 1 - x, 1 - y)

    # Then, limit by distance to other circles
    # Each pair of circles with centers at distance d can have
    # sum of radii at most d to avoid overlap
    for i in range(n):
        for j in range(i + 1, n):
            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))

            # If current radii would cause overlap
            if radii[i] + radii[j] > dist:
                # Scale both radii proportionally
                scale = dist / (radii[i] + radii[j])
                radii[i] *= scale
                radii[j] *= scale

    return radii
=======
def compute_max_radii(centers):
    """
    Compute the maximum possible radii for each circle position
    such that they don't overlap and stay within the unit square.

    Args:
        centers: np.array of shape (n, 2) with (x, y) coordinates

    Returns:
        np.array of shape (n) with radius of each circle
    """
    n = centers.shape[0]
    radii = np.ones(n)

    # First, limit by distance to square borders
    for i in range(n):
        x, y = centers[i]
        radii[i] = min(x, y, 1 - x, 1 - y)

    # Iterative relaxation to better accommodate overlaps
    max_iters = 12
    for _ in range(max_iters):
        changed = False
        for i in range(n):
            for j in range(i + 1, n):
                diff = centers[i] - centers[j]
                dist = np.sqrt(np.sum(diff * diff))
                s = radii[i] + radii[j]
                if dist < s - 1e-12:
                    if dist == 0:
                        scale = 0.5
                    else:
                        scale = dist / s
                    radii[i] *= scale
                    radii[j] *= scale
                    changed = True
        if not changed:
            break

    return radii
>>>>>>> REPLACE
</DIFF>