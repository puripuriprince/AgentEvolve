--- a/original.py
+++ b/original.py
@@ -1,94 +1,112 @@
 # EVOLVE-BLOCK-START
-"""Constructor-based circle packing for n=26 circles"""
+"""Hybrid arrangement with center-edge-corner gradient for n=26 circles"""
 
 import numpy as np
 
-
 def construct_packing():
     """
-    Construct a specific arrangement of 26 circles in a unit square
-    that attempts to maximize the sum of their radii.
+    Construct an improved arrangement of 26 circles in a unit square,
+    using a hybrid placement: big center, edge-centers, corners, 
+    inner/outer rings, and interstitials.
 
     Returns:
-        Tuple of (centers, radii, sum_of_radii)
+        Tuple of (centers, radii)
         centers: np.array of shape (26, 2) with (x, y) coordinates
         radii: np.array of shape (26) with radius of each circle
-        sum_of_radii: Sum of all radii
     """
-    # Initialize arrays for 26 circles
     n = 26
     centers = np.zeros((n, 2))
 
-    # Place circles in a structured pattern
-    # This is a simple pattern - evolution will improve this
+    # 0: large center
+    centers[0] = [0.5, 0.5]
+    # 1-4: edge centers
+    centers[1] = [0.5, 0.05]
+    centers[2] = [0.95, 0.5]
+    centers[3] = [0.5, 0.95]
+    centers[4] = [0.05, 0.5]
+    # 5-8: corners
+    centers[5] = [0.05, 0.05]
+    centers[6] = [0.95, 0.05]
+    centers[7] = [0.95, 0.95]
+    centers[8] = [0.05, 0.95]
+    # 9-16: inner ring (radius 0.27 from center)
+    angle_offset = np.pi/8
+    for i in range(8):
+        angle = 2*np.pi*i/8 + angle_offset
+        r = 0.27
+        centers[9+i] = [0.5 + r * np.cos(angle), 0.5 + r * np.sin(angle)]
+    # 17-25: between edge-centers and corners (edge "thirds" & face diagonals)
+    # 4 on edge thirds (not at center nor corner), 5 on face diagonal midpoints (including one more central)
+    edge_third = 0.22
+    centers[17] = [0.5, edge_third]
+    centers[18] = [0.5, 1-edge_third]
+    centers[19] = [edge_third, 0.5]
+    centers[20] = [1-edge_third, 0.5]
+    # 5 interstitials: diagonals 1/4 and 3/4 between center and each corner
+    diag_1_4 = 0.25
+    diag_3_4 = 0.75
+    centers[21] = [diag_1_4, diag_1_4]
+    centers[22] = [diag_3_4, diag_1_4]
+    centers[23] = [diag_3_4, diag_3_4]
+    centers[24] = [diag_1_4, diag_3_4]
+    # 25: central vertical/horizontal cross intersection
+    centers[25] = [0.5, 0.75]
 
-    # First, place a large circle in the center
-    centers[0] = [0.5, 0.5]
+    # Slightly move points inside if at the border
+    centers = np.clip(centers, 0.012, 0.988)
 
-    # Place 8 circles around it in a ring
-    for i in range(8):
-        angle = 2 * np.pi * i / 8
-        centers[i + 1] = [0.5 + 0.3 * np.cos(angle), 0.5 + 0.3 * np.sin(angle)]
-
-    # Place 16 more circles in an outer ring
-    for i in range(16):
-        angle = 2 * np.pi * i / 16
-        centers[i + 9] = [0.5 + 0.7 * np.cos(angle), 0.5 + 0.7 * np.sin(angle)]
-
-    # Additional positioning adjustment to make sure all circles
-    # are inside the square and don't overlap
-    # Clip to ensure everything is inside the unit square
-    centers = np.clip(centers, 0.01, 0.99)
-
-    # Compute maximum valid radii for this configuration
-    radii = compute_max_radii(centers)
+    # Compute maximal radii
+    radii = compute_max_radii_iterative(centers)
     return centers, radii
 
-
-def compute_max_radii(centers):
+def compute_max_radii_iterative(centers, max_iters=50, tol=1e-8):
     """
-    Compute the maximum possible radii for each circle position
-    such that they don't overlap and stay within the unit square.
+    Iteratively compute maximal radii so that circles don't overlap or exit the unit square.
+    Uses a pairwise min procedure and iterative tightening.
 
     Args:
-        centers: np.array of shape (n, 2) with (x, y) coordinates
+        centers: np.array (n, 2)
+        max_iters: int, number of iterations for tightening
+        tol: convergence tolerance
 
     Returns:
-        np.array of shape (n) with radius of each circle
+        radii: np.array (n,)
     """
     n = centers.shape[0]
     radii = np.ones(n)
-
-    # First, limit by distance to square borders
+    # Border constraint
     for i in range(n):
         x, y = centers[i]
-        # Distance to borders
-        radii[i] = min(x, y, 1 - x, 1 - y)
-
-    # Then, limit by distance to other circles
-    # Each pair of circles with centers at distance d can have
-    # sum of radii at most d to avoid overlap
-    for i in range(n):
-        for j in range(i + 1, n):
-            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))
-
-            # If current radii would cause overlap
-            if radii[i] + radii[j] > dist:
-                # Scale both radii proportionally
-                scale = dist / (radii[i] + radii[j])
-                radii[i] *= scale
-                radii[j] *= scale
-
+        radii[i] = min(x, y, 1-x, 1-y)
+    # Iterative tightening for overlaps
+    for _ in range(max_iters):
+        prev = radii.copy()
+        for i in range(n):
+            for j in range(i+1, n):
+                dist = np.linalg.norm(centers[i]-centers[j])
+                if dist < 1e-8:
+                    # If two centers are coincident, force radii to nearly zero
+                    radii[i] = min(radii[i], 1e-4)
+                    radii[j] = min(radii[j], 1e-4)
+                elif radii[i] + radii[j] > dist:
+                    # Reduce both radii proportionally to avoid overlap
+                    excess = (radii[i] + radii[j]) - dist
+                    share = 0.5 * excess
+                    radii[i] -= share
+                    radii[j] -= share
+                    radii[i] = max(radii[i], 1e-6)
+                    radii[j] = max(radii[j], 1e-6)
+        if np.max(np.abs(radii - prev)) < tol:
+            break
     return radii
-
 
 # EVOLVE-BLOCK-END
 
 
 # This part remains fixed (not evolved)
 def run_packing():
     """Run the circle packing constructor for n=26"""
     centers, radii = construct_packing()
     # Calculate the sum of radii
     sum_radii = np.sum(radii)
     return centers, radii, sum_radii
