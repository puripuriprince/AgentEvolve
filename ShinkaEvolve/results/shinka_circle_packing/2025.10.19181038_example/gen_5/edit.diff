--- a/original.py
+++ b/original.py
@@ -1,94 +1,126 @@
 # EVOLVE-BLOCK-START
-"""Constructor-based circle packing for n=26 circles"""
+"""Layered forced-symmetry gradient circle packing for n=26 circles"""
 
 import numpy as np
 
-
 def construct_packing():
     """
-    Construct a specific arrangement of 26 circles in a unit square
-    that attempts to maximize the sum of their radii.
+    Construct a maximized sum-of-radii packing of 26 circles in a unit square
+    using layered, symmetry-forced, gradient and local repulsion ideas.
 
     Returns:
-        Tuple of (centers, radii, sum_of_radii)
-        centers: np.array of shape (26, 2) with (x, y) coordinates
-        radii: np.array of shape (26) with radius of each circle
-        sum_of_radii: Sum of all radii
+        centers: np.array of shape (26, 2)
+        radii: np.array of shape (26,)
     """
-    # Initialize arrays for 26 circles
     n = 26
     centers = np.zeros((n, 2))
 
-    # Place circles in a structured pattern
-    # This is a simple pattern - evolution will improve this
+    # Layer assignment:
+    # 0: Center
+    # 1-6: Inner hexagon ring (6)
+    # 7-18: Outer dodecagon ring (12)
+    # 19-22: Edge-centers (4)
+    # 23-26: Corners (4)
 
-    # First, place a large circle in the center
+    # --- Central circle ---
     centers[0] = [0.5, 0.5]
 
-    # Place 8 circles around it in a ring
-    for i in range(8):
-        angle = 2 * np.pi * i / 8
-        centers[i + 1] = [0.5 + 0.3 * np.cos(angle), 0.5 + 0.3 * np.sin(angle)]
+    # --- Inner ring (hexagon, radius r1) ---
+    # r1 = 0.23 ensures separation from center and outer
+    r1 = 0.23
+    for i in range(6):
+        angle = 2*np.pi*i/6
+        centers[1+i] = [0.5 + r1*np.cos(angle), 0.5 + r1*np.sin(angle)]
 
-    # Place 16 more circles in an outer ring
-    for i in range(16):
-        angle = 2 * np.pi * i / 16
-        centers[i + 9] = [0.5 + 0.7 * np.cos(angle), 0.5 + 0.7 * np.sin(angle)]
+    # --- Outer ring (dodecagon, radius r2) ---
+    r2 = 0.42
+    outer_angle_offset = np.pi/12  # slight rotation for better edge coverage
+    for i in range(12):
+        angle = 2*np.pi*i/12 + outer_angle_offset
+        centers[7+i] = [0.5 + r2*np.cos(angle), 0.5 + r2*np.sin(angle)]
 
-    # Additional positioning adjustment to make sure all circles
-    # are inside the square and don't overlap
-    # Clip to ensure everything is inside the unit square
-    centers = np.clip(centers, 0.01, 0.99)
+    # --- Edge-centers (inset slightly to allow larger radii) ---
+    edge_inset = 0.062
+    centers[19] = [0.5, edge_inset]
+    centers[20] = [1-edge_inset, 0.5]
+    centers[21] = [0.5, 1-edge_inset]
+    centers[22] = [edge_inset, 0.5]
 
-    # Compute maximum valid radii for this configuration
-    radii = compute_max_radii(centers)
-    return centers, radii
+    # --- Corners (inset for larger radii) ---
+    corner_inset = 0.061
+    centers[23] = [corner_inset, corner_inset]
+    centers[24] = [1-corner_inset, corner_inset]
+    centers[25] = [1-corner_inset, 1-corner_inset]
+    centers[26-1] = [corner_inset, 1-corner_inset]
 
+    # --- Local repulsion refinement (mini-optimization) ---
+    # Only nudge outer, edge, and corner circles, not the center or inner ring (structural backbone)
+    movable = np.array([False]*7 + [True]*12 + [True]*4 + [True]*4)
+    repulse_iters = 8
+    repulse_eps = 1e-3
+    for _ in range(repulse_iters):
+        for i in range(n):
+            if not movable[i]:
+                continue
+            dxy = np.zeros(2)
+            for j in range(n):
+                if i == j:
+                    continue
+                delta = centers[i] - centers[j]
+                dist = np.linalg.norm(delta)
+                if dist < 1e-8:
+                    dxy += np.random.randn(2)*1e-3
+                elif dist < 0.07:
+                    # Strong repulsion for near-coincident
+                    dxy += delta / (dist+1e-6) * 0.013
+                elif dist < 0.18:
+                    # Moderate repulsion
+                    dxy += delta / dist * 0.004
+            # Bias to stay in the square
+            for d in range(2):
+                if centers[i][d] < 0.015:
+                    dxy[d] += 0.01
+                if centers[i][d] > 0.985:
+                    dxy[d] -= 0.01
+            centers[i] += dxy
+        # Clamp to square (with inset)
+        centers = np.clip(centers, 0.013, 0.987)
 
-def compute_max_radii(centers):
-    """
-    Compute the maximum possible radii for each circle position
-    such that they don't overlap and stay within the unit square.
-
-    Args:
-        centers: np.array of shape (n, 2) with (x, y) coordinates
-
-    Returns:
-        np.array of shape (n) with radius of each circle
-    """
-    n = centers.shape[0]
-    radii = np.ones(n)
-
-    # First, limit by distance to square borders
+    # --- Compute radii gradient ---
+    # Center gets largest, inner ring next, outer ring/edges/corners smallest (but not too small)
+    radii = np.zeros(n)
+    # Borders: stay within square
     for i in range(n):
         x, y = centers[i]
-        # Distance to borders
-        radii[i] = min(x, y, 1 - x, 1 - y)
+        radii[i] = min(x, y, 1-x, 1-y)
+    # Pairwise overlap constraint: iteratively shrink if needed
+    for _ in range(38):
+        prev = radii.copy()
+        for i in range(n):
+            for j in range(i+1, n):
+                dist = np.linalg.norm(centers[i]-centers[j])
+                if dist < 1e-8:
+                    radii[i] = min(radii[i], 1e-4)
+                    radii[j] = min(radii[j], 1e-4)
+                elif radii[i] + radii[j] > dist:
+                    excess = (radii[i] + radii[j]) - dist
+                    share = 0.5*excess
+                    radii[i] -= share
+                    radii[j] -= share
+                    radii[i] = max(radii[i], 1e-6)
+                    radii[j] = max(radii[j], 1e-6)
+        if np.max(np.abs(radii-prev)) < 1e-8:
+            break
 
-    # Then, limit by distance to other circles
-    # Each pair of circles with centers at distance d can have
-    # sum of radii at most d to avoid overlap
-    for i in range(n):
-        for j in range(i + 1, n):
-            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))
-
-            # If current radii would cause overlap
-            if radii[i] + radii[j] > dist:
-                # Scale both radii proportionally
-                scale = dist / (radii[i] + radii[j])
-                radii[i] *= scale
-                radii[j] *= scale
-
-    return radii
-
+    return centers, radii
 
 # EVOLVE-BLOCK-END
 
 
 # This part remains fixed (not evolved)
 def run_packing():
     """Run the circle packing constructor for n=26"""
     centers, radii = construct_packing()
     # Calculate the sum of radii
     sum_radii = np.sum(radii)
     return centers, radii, sum_radii
