--- a/original.py
+++ b/original.py
@@ -1,98 +1,113 @@
 # EVOLVE-BLOCK-START
-"""Constructor-based circle packing for n=26 circles"""
+"""Adaptive hybrid ring/corner/edge circle packing for n=26 circles"""
 
 import numpy as np
 
-
 def construct_packing():
     """
-    Construct a specific arrangement of 26 circles in a unit square
+    Construct an improved arrangement of 26 circles in a unit square
     that attempts to maximize the sum of their radii.
 
     Returns:
-        Tuple of (centers, radii, sum_of_radii)
+        Tuple of (centers, radii)
         centers: np.array of shape (26, 2) with (x, y) coordinates
         radii: np.array of shape (26) with radius of each circle
-        sum_of_radii: Sum of all radii
     """
-    # Initialize arrays for 26 circles
     n = 26
     centers = np.zeros((n, 2))
 
-    # Place circles in a structured pattern
-    # This is a simple pattern - evolution will improve this
-
-    # First, place a large circle in the center
+    # 1. Place a large circle in the center
     centers[0] = [0.5, 0.5]
 
-    # Tunable ring distances for flexible configuration
-    ring1 = 0.28  # inner ring radius
-    ring2 = 0.65  # outer ring radius
-
-    # Place 8 circles around it in an inner ring
+    # 2. Place 8 circles in an inner ring
+    ring1 = 0.28
     for i in range(8):
         angle = 2 * np.pi * i / 8
-        centers[i + 1] = [0.5 + ring1 * np.cos(angle), 0.5 + ring1 * np.sin(angle)]
+        centers[1 + i] = [0.5 + ring1 * np.cos(angle), 0.5 + ring1 * np.sin(angle)]
 
-    # Place 17 circles in an outer ring
-    for i in range(17):
-        angle = 2 * np.pi * i / 17
-        centers[i + 9] = [0.5 + ring2 * np.cos(angle), 0.5 + ring2 * np.sin(angle)]
+    # 3. Place 12 circles in an outer ring
+    ring2 = 0.65
+    for i in range(12):
+        angle = 2 * np.pi * i / 12
+        centers[9 + i] = [0.5 + ring2 * np.cos(angle), 0.5 + ring2 * np.sin(angle)]
 
-    # Additional positioning adjustment to make sure all circles
-    # are inside the square and don't overlap
-    # Clip to ensure everything is inside the unit square
+    # 4. Place 4 circles at the corners
+    corners = np.array([[0.01, 0.01], [0.99, 0.01], [0.99, 0.99], [0.01, 0.99]])
+    centers[21:25] = corners
+
+    # 5. Place 1 circle at the center of a random edge (choose bottom edge for determinism)
+    centers[25] = [0.5, 0.01]
+
+    # Ensure all centers are within the unit square
     centers = np.clip(centers, 0.01, 0.99)
 
-    # Compute maximum valid radii for this configuration
-    radii = compute_max_radii(centers)
+    # Compute adaptive initial radii
+    radii = adaptive_max_radii(centers)
+
+    # Local optimization: nudge circles away from overlaps and recompute radii
+    for _ in range(4):
+        centers = local_nudge(centers, radii)
+        radii = adaptive_max_radii(centers)
+
     return centers, radii
 
-
-def compute_max_radii(centers):
+def adaptive_max_radii(centers):
     """
     Compute the maximum possible radii for each circle position
     such that they don't overlap and stay within the unit square.
-
-    Args:
-        centers: np.array of shape (n, 2) with (x, y) coordinates
-
-    Returns:
-        np.array of shape (n) with radius of each circle
+    Uses a more adaptive, iterative approach.
     """
     n = centers.shape[0]
     radii = np.ones(n)
-
-    # First, limit by distance to square borders
+    # Limit by distance to square borders
     for i in range(n):
         x, y = centers[i]
-        # Distance to borders
         radii[i] = min(x, y, 1 - x, 1 - y)
-
-    # Then, limit by distance to other circles
-    # Each pair of circles with centers at distance d can have
-    # sum of radii at most d to avoid overlap
-    for i in range(n):
-        for j in range(i + 1, n):
-            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))
-
-            # If current radii would cause overlap
-            if radii[i] + radii[j] > dist:
-                # Scale both radii proportionally
-                scale = dist / (radii[i] + radii[j])
-                radii[i] *= scale
-                radii[j] *= scale
-
+    # Limit by distance to other circles (with a small margin)
+    for _ in range(2):  # Two passes for better convergence
+        for i in range(n):
+            for j in range(i + 1, n):
+                dist = np.linalg.norm(centers[i] - centers[j])
+                if dist < 1e-8:
+                    # Overlapping centers, shrink both
+                    radii[i] *= 0.95
+                    radii[j] *= 0.95
+                elif radii[i] + radii[j] > dist - 1e-4:
+                    # Shrink both radii slightly to avoid overlap
+                    scale = (dist - 1e-4) / (radii[i] + radii[j])
+                    scale = max(scale, 0.7)
+                    radii[i] *= scale
+                    radii[j] *= scale
     return radii
 
+def local_nudge(centers, radii):
+    """
+    Nudge circles away from their nearest neighbor if overlap is detected.
+    """
+    n = centers.shape[0]
+    new_centers = centers.copy()
+    for i in range(n):
+        for j in range(n):
+            if i == j:
+                continue
+            d = np.linalg.norm(centers[i] - centers[j])
+            min_dist = radii[i] + radii[j] + 1e-4
+            if d < min_dist and d > 1e-8:
+                # Move i away from j
+                direction = (centers[i] - centers[j]) / d
+                move_dist = (min_dist - d) * 0.55
+                new_centers[i] += direction * move_dist
+                # Keep within bounds
+                new_centers[i] = np.clip(new_centers[i], 0.01, 0.99)
+    return new_centers
 
 # EVOLVE-BLOCK-END
 
 
 # This part remains fixed (not evolved)
 def run_packing():
     """Run the circle packing constructor for n=26"""
     centers, radii = construct_packing()
     # Calculate the sum of radii
     sum_radii = np.sum(radii)
     return centers, radii, sum_radii