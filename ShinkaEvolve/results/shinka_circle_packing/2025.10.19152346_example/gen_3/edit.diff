--- a/original.py
+++ b/original.py
@@ -1,94 +1,116 @@
 # EVOLVE-BLOCK-START
-"""Constructor-based circle packing for n=26 circles"""
-
 import numpy as np
 
+def construct_packing():
+    """Construct a hybrid circle packing in the unit square with improved total radii."""
+    n = 26
+    centers = []
+    radii = []
 
-def construct_packing():
-    """
-    Construct a specific arrangement of 26 circles in a unit square
-    that attempts to maximize the sum of their radii.
+    # Place large circles at key positions: center and corners
+    large_radius = 0.2
+    centers.append([0.5, 0.5])  # center
+    radii.append(large_radius)
 
-    Returns:
-        Tuple of (centers, radii, sum_of_radii)
-        centers: np.array of shape (26, 2) with (x, y) coordinates
-        radii: np.array of shape (26) with radius of each circle
-        sum_of_radii: Sum of all radii
-    """
-    # Initialize arrays for 26 circles
-    n = 26
-    centers = np.zeros((n, 2))
+    corners = [
+        [large_radius, large_radius],
+        [1 - large_radius, large_radius],
+        [large_radius, 1 - large_radius],
+        [1 - large_radius, 1 - large_radius],
+    ]
+    for c in corners:
+        centers.append(c)
+        radii.append(large_radius)
 
-    # Place circles in a structured pattern
-    # This is a simple pattern - evolution will improve this
+    # Place intermediate circles along edges with decreasing radii
+    edge_positions = []
+    for i in range(1, 5):
+        # Along bottom edge
+        x = i / 5
+        y = 0.1
+        edge_positions.append([x, y])
+        # Along top edge
+        edge_positions.append([x, 1 - 0.1])
+        # Along left edge
+        y = i / 5
+        x = 0.1
+        edge_positions.append([x, y])
+        # Along right edge
+        x = 1 - 0.1
+        edge_positions.append([x, y])
 
-    # First, place a large circle in the center
-    centers[0] = [0.5, 0.5]
+    # Assign radii decreasing towards corners
+    for pos in edge_positions:
+        # Distance from center for scaling radii
+        dist_center = np.linalg.norm(np.array(pos) - [0.5, 0.5])
+        # Radii inversely proportional to distance from center
+        radius = max(0.05, 0.2 * (1 - dist_center))
+        centers.append(pos)
+        radii.append(radius)
 
-    # Place 8 circles around it in a ring
-    for i in range(8):
-        angle = 2 * np.pi * i / 8
-        centers[i + 1] = [0.5 + 0.3 * np.cos(angle), 0.5 + 0.3 * np.sin(angle)]
+    # Fill remaining positions with small circles in a grid to maximize packing
+    grid_x = np.linspace(0.2, 0.8, 4)
+    grid_y = np.linspace(0.2, 0.8, 4)
+    for x in grid_x:
+        for y in grid_y:
+            # Avoid overlapping with existing large or medium circles
+            candidate = np.array([x, y])
+            # Check overlap with existing circles
+            overlaps = False
+            for c, r in zip(centers, radii):
+                dist = np.linalg.norm(candidate - c)
+                if dist < r + 0.02:
+                    overlaps = True
+                    break
+            if not overlaps:
+                # Assign small radius
+                radius = 0.02
+                centers.append([x, y])
+                radii.append(radius)
 
-    # Place 16 more circles in an outer ring
-    for i in range(16):
-        angle = 2 * np.pi * i / 16
-        centers[i + 9] = [0.5 + 0.7 * np.cos(angle), 0.5 + 0.7 * np.sin(angle)]
+    centers = np.array(centers[:n])
+    radii = np.array(radii[:n])
 
-    # Additional positioning adjustment to make sure all circles
-    # are inside the square and don't overlap
-    # Clip to ensure everything is inside the unit square
-    centers = np.clip(centers, 0.01, 0.99)
-
-    # Compute maximum valid radii for this configuration
+    # Compute maximum radii for these centers considering overlaps
     radii = compute_max_radii(centers)
     return centers, radii
 
-
 def compute_max_radii(centers):
-    """
-    Compute the maximum possible radii for each circle position
-    such that they don't overlap and stay within the unit square.
-
-    Args:
-        centers: np.array of shape (n, 2) with (x, y) coordinates
-
-    Returns:
-        np.array of shape (n) with radius of each circle
-    """
-    n = centers.shape[0]
-    radii = np.ones(n)
-
-    # First, limit by distance to square borders
+    """Compute maximum radii so circles do not overlap and stay inside bounds."""
+    n = len(centers)
+    radii = np.zeros(n)
     for i in range(n):
-        x, y = centers[i]
+        c = centers[i]
         # Distance to borders
-        radii[i] = min(x, y, 1 - x, 1 - y)
-
-    # Then, limit by distance to other circles
-    # Each pair of circles with centers at distance d can have
-    # sum of radii at most d to avoid overlap
-    for i in range(n):
-        for j in range(i + 1, n):
-            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))
-
-            # If current radii would cause overlap
-            if radii[i] + radii[j] > dist:
-                # Scale both radii proportionally
-                scale = dist / (radii[i] + radii[j])
-                radii[i] *= scale
-                radii[j] *= scale
-
+        radii[i] = min(c[0], 1 - c[0], c[1], 1 - c[1])
+    # Adjust radii to prevent overlaps
+    changed = True
+    while changed:
+        changed = False
+        for i in range(n):
+            for j in range(i + 1, n):
+                d = np.linalg.norm(centers[i] - centers[j])
+                max_r = d / 2
+                if radii[i] + radii[j] > d:
+                    # Scale down to prevent overlap
+                    scale = max_r / (radii[i] + radii[j])
+                    if scale < 1:
+                        radii[i] *= scale
+                        radii[j] *= scale
+                        changed = True
+                        # Ensure radii do not exceed border constraints
+                        for k in [i, j]:
+                            c = centers[k]
+                            radii[k] = min(radii[k], min(c[0], 1 - c[0], c[1], 1 - c[1]))
     return radii
-
 
 # EVOLVE-BLOCK-END
 
 
 # This part remains fixed (not evolved)
 def run_packing():
     """Run the circle packing constructor for n=26"""
     centers, radii = construct_packing()
     # Calculate the sum of radii
     sum_radii = np.sum(radii)
     return centers, radii, sum_radii
