--- a/original.py
+++ b/original.py
@@ -1,94 +1,106 @@
 # EVOLVE-BLOCK-START
-"""Constructor-based circle packing for n=26 circles"""
+"""Enhanced hybrid circle packing for n=26 circles"""
 
 import numpy as np
 
-
 def construct_packing():
     """
-    Construct a specific arrangement of 26 circles in a unit square
-    that attempts to maximize the sum of their radii.
-
-    Returns:
-        Tuple of (centers, radii, sum_of_radii)
-        centers: np.array of shape (26, 2) with (x, y) coordinates
-        radii: np.array of shape (26) with radius of each circle
-        sum_of_radii: Sum of all radii
+    Construct a strategic arrangement of 26 circles in a unit square
+    with variable radii to maximize total sum of radii.
     """
-    # Initialize arrays for 26 circles
     n = 26
     centers = np.zeros((n, 2))
+    radii = np.zeros(n)
 
-    # Place circles in a structured pattern
-    # This is a simple pattern - evolution will improve this
-
-    # First, place a large circle in the center
+    # Place large circle at center
     centers[0] = [0.5, 0.5]
 
-    # Place 8 circles around it in a ring
-    for i in range(8):
-        angle = 2 * np.pi * i / 8
-        centers[i + 1] = [0.5 + 0.3 * np.cos(angle), 0.5 + 0.3 * np.sin(angle)]
+    # Place 4 large corner circles
+    corner_positions = np.array([
+        [0.1, 0.1],
+        [0.9, 0.1],
+        [0.9, 0.9],
+        [0.1, 0.9]
+    ])
+    centers[1:5] = corner_positions
 
-    # Place 16 more circles in an outer ring
-    for i in range(16):
-        angle = 2 * np.pi * i / 16
-        centers[i + 9] = [0.5 + 0.7 * np.cos(angle), 0.5 + 0.7 * np.sin(angle)]
+    # Fill remaining 21 circles in a grid pattern
+    grid_x = np.linspace(0.2, 0.8, 3)
+    grid_y = np.linspace(0.2, 0.8, 3)
+    grid_points = np.array([(x, y) for x in grid_x for y in grid_y])
+    # Remove center point to avoid overlap with large center circle
+    grid_points = np.delete(grid_points, 4, axis=0)
+    centers[5:5+len(grid_points)] = grid_points
 
-    # Additional positioning adjustment to make sure all circles
-    # are inside the square and don't overlap
-    # Clip to ensure everything is inside the unit square
-    centers = np.clip(centers, 0.01, 0.99)
+    # Initialize radii based on proximity to borders and centers
+    radii = compute_max_radii(centers)
 
-    # Compute maximum valid radii for this configuration
-    radii = compute_max_radii(centers)
-    return centers, radii
+    # Local optimization: adjust radii to maximize sum without overlaps
+    radii = optimize_radii(centers, radii)
 
+    sum_of_radii = np.sum(radii)
+    return centers, radii, sum_of_radii
 
 def compute_max_radii(centers):
     """
-    Compute the maximum possible radii for each circle position
-    such that they don't overlap and stay within the unit square.
-
-    Args:
-        centers: np.array of shape (n, 2) with (x, y) coordinates
-
-    Returns:
-        np.array of shape (n) with radius of each circle
+    Compute initial maximum radii based on distance to borders and neighboring circles.
     """
     n = centers.shape[0]
-    radii = np.ones(n)
+    radii = np.full(n, 0.1)  # start with small radii
 
-    # First, limit by distance to square borders
+    # Limit by distance to borders
     for i in range(n):
         x, y = centers[i]
-        # Distance to borders
-        radii[i] = min(x, y, 1 - x, 1 - y)
+        radii[i] = min(x, y, 1 - x, 1 - y, radii[i])
 
-    # Then, limit by distance to other circles
-    # Each pair of circles with centers at distance d can have
-    # sum of radii at most d to avoid overlap
+    # Limit by distance to other circles
     for i in range(n):
         for j in range(i + 1, n):
-            dist = np.sqrt(np.sum((centers[i] - centers[j]) ** 2))
-
-            # If current radii would cause overlap
-            if radii[i] + radii[j] > dist:
-                # Scale both radii proportionally
-                scale = dist / (radii[i] + radii[j])
-                radii[i] *= scale
-                radii[j] *= scale
-
+            dist = np.linalg.norm(centers[i] - centers[j])
+            if dist < 1e-8:
+                continue
+            max_radius = dist / 2
+            radii[i] = min(radii[i], max_radius)
+            radii[j] = min(radii[j], max_radius)
     return radii
 
+def optimize_radii(centers, radii, iterations=50):
+    """
+    Iteratively adjust radii to maximize total sum while avoiding overlaps.
+    """
+    n = len(radii)
+    for _ in range(iterations):
+        for i in range(n):
+            # Limit by borders
+            x, y = centers[i]
+            max_border_radius = min(x, y, 1 - x, 1 - y)
+            radii[i] = min(radii[i], max_border_radius)
+
+        # Limit by neighboring circles
+        for i in range(n):
+            for j in range(i + 1, n):
+                dist = np.linalg.norm(centers[i] - centers[j])
+                if dist < 1e-8:
+                    continue
+                max_radius = dist / 2
+                if radii[i] + radii[j] > dist:
+                    # Scale down both radii proportionally
+                    scale = max_radius / (radii[i] + radii[j])
+                    radii[i] *= scale
+                    radii[j] *= scale
+        # Optional: slightly increase radii to improve total sum
+        radii *= 1.01
+        # Clip to non-negative
+        radii = np.clip(radii, 0, None)
+    return radii
 
 # EVOLVE-BLOCK-END
 
 
 # This part remains fixed (not evolved)
 def run_packing():
     """Run the circle packing constructor for n=26"""
     centers, radii = construct_packing()
     # Calculate the sum of radii
     sum_radii = np.sum(radii)
     return centers, radii, sum_radii
